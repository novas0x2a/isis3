include $(ISISROOT)/make/isismake.macros

ROOTINCLUDES = $(addprefix $(ISISROOT)/inc/, $(INCS))
PLUGINS      = $(strip $(wildcard *.plugin))
LIBRARY      = lib$(shell basename $(CURDIR))
ARCHIVELIB   = $(LIBRARY).a
SHAREDLIB    = $(LIBRARY).$(SHAREDLIBEXT)
PROTOS       = $(wildcard *.proto)
PROTOSGEN    = $(wildcard *.pb.*)
PROTOSOBJ    = $(wildcard *.pb.o)
MOCINC       = $(wildcard *.h)
MOCGEN	     = $(wildcard moc_*.cpp)


.SUFFIXES:			#eliminate default suffixes
.SUFFIXES: .cpp .o
.SUFFIXES: .xml .html
.SUFFIXES: .a .so .dylib
.SUFFIXES: .proto .pb.h .pb.cc
.SUFFIXES: .cc .o

object: $(OBJS) $(PROTOS:%.proto=%.pb.o)

.cpp.o: protos qtmoc
	$(CXX) $(ALLINCDIRS) $(ISISCPPFLAGS) -c -o $@ $?

.cc.o: 
	$(CXX) $(ALLINCDIRS) $(ISISCPPFLAGS) -c -o $@ $?

#  Its not necessarily $(LIBRARY)!
.a.so :
	$(LDSHARED) $(ISISFINALFLAGS) $(ISISSHAREDFLAGS) $(ISISSHAREDON) -o libisis$(ISISMAJOR).$(SHAREDLIBEXT).$(ISISMINOR).$(ISISMINORMINOR) $? $(ISISSHAREDOFF) $(ALLLIBDIRS) $(ALLLIBS)
	$(LN) -f libisis$(ISISMAJOR).$(SHAREDLIBEXT).$(ISISMINOR).$(ISISMINORMINOR) libisis$(ISISMAJOR).$(SHAREDLIBEXT)

#  Its not necessarily $(LIBRARY)!
.a.dylib :
	$(RM) -rd .objs;
	$(MKDIR) .objs && cd .objs && ar x ../$*.a;
	$(LDSHARED) $(ISISFINALFLAGS) $(ISISSHAREDON) -o $@ \
	  -install_name $(CURDIR)/$@ $(DYLIBVERSION)  .objs/*.o $(ISISSHAREDOFF) $(ALLLIBDIRS) $(ALLLIBS)
	$(LN) -f libisis$(ISISLIBVERSION).$(SHAREDLIBEXT) libisis$(ISISMAJOR).$(SHAREDLIBEXT)
	$(RM) -rd .objs;

incs: protos $(ROOTINCLUDES)

$(ROOTINCLUDES): $(INCS)
	cp -p ${@F} $(ISISROOT)/inc
	chmod 644 $(ISISROOT)/inc/${@F}

#  For plugins, it is the $(LIBRARY) (more precisely $(SHAREDLIB))
install: object
	if [ "$(PLUGINS)" != "" ]; \
	then \
	  touch $(ISISROOT)/lib/$(PLUGINS); \
	  cat $(PLUGINS) >> $(ISISROOT)/lib/$(PLUGINS); \
	  $(MAKE) plugin; \
	  cp -p $(SHAREDLIB) $(ISISROOT)/lib; \
	elif [ "$(OBJS)" != "" ]; \
	then \
	  ar $(ISISARFLAGS) -crs $(ISISROOT)/lib/libisis$(ISISLIBVERSION).a $(OBJS); \
	  $(RANLIB) $(ISISROOT)/lib/libisis$(ISISLIBVERSION).a; \
	fi

force: ;

protos:	$(PROTOS:%.proto=%.pb.h) $(PROTOS:%.proto=%.pb.cc)

%.pb.cc %.pb.h: %.proto
	protoc -I$(<D) --cpp_out=$(<D) $^

qtmoc: $(MOCINC:%.h=moc_%.cpp)

moc_%.cpp: %.h		
	if [ "$(filter-out ' ', $(shell grep -sIE -m1 'Q_OBJECT' $(<F)))" == "Q_OBJECT" ]; \
	then \
	  $(MOC) $(MOCDEFINES) -o $@ $(<F); \
	fi

qrc_%.cpp: %.qrc		
	$(RCC) $(RCCDEFINES) -o $@ $(<F);
	
help:
	echo "Isis Make Object Commands"
	echo "------------------------ "
	echo "make                          : Builds the object"
	echo "make MODE=DEBUG[,NOMEMCHECK]  : Builds the object for stack tracing and memory"
	echo "                                  debugging"
	echo "make plugin                   : Builds a plugin object if applicable"
	echo "make install                  : Calls the make target and copies the object and"
	echo "                                  plugin to $ISISROOT/..."
	echo "make html                     : Builds the html page for the object"
	echo "make clean                    : Removes the application, *.html and *.o files."
	echo "                                  Also cleans the test directories"
	echo "make sanitize                 : Calls the clean target then removes tttt* junk.*"
	echo "                                  and TEMP* files"
	echo "make unitTest                 : Make the unitTest application"
	echo "make test                     : Runs the unitTests and print result"
	echo "make test MODE=NOCLEAN        : Run test and print result, leave output" 
	echo "make truthdata                : Runs the unitTest and creates <Objectname>.truth"
	echo "make ostruthdata              : Runs the unitTest and creates OS specific truth"
	echo "make protos                   : Builds the object of google protocol buffer(*.proto) files"

html: force
	mkdir -p docbuild
	cat $(ISISROOT)/src/docsys/Object/build//Programmer.conf         >  docbuild/ProgTester_temp.conf
	echo "FILE_PATTERNS          = *.h *.cpp *.doxydef"             >> docbuild/ProgTester_temp.conf
	echo "OUTPUT_DIRECTORY = $(CURDIR)/"                             >> docbuild/ProgTester_temp.conf
	echo "STRIP_FROM_PATH  = $(CURDIR)/"                             >> docbuild/ProgTester_temp.conf
	echo "LATEX_OUTPUT     = $(CURDIR)/html/latex"                   >> docbuild/ProgTester_temp.conf
	echo "INPUT            = $(ISISROOT)/src/docsys/Object/build/isisDoxyDefs.doxydef $(CURDIR)/"  >> docbuild/ProgTester_temp.conf
	echo "HTML_HEADER      = $(ISISROOT)/src/docsys/Object/build/IsisObjectHeaderProgTester.html" >> docbuild/ProgTester_temp.conf
	echo "HTML_FOOTER      = $(ISISROOT)/src/docsys/Object/build/IsisObjectFooterProgTester.html" >> docbuild/ProgTester_temp.conf
	echo "HTML_OUTPUT      = html"                                   >> docbuild/ProgTester_temp.conf
	echo "TAGFILES         = "                                       >> docbuild/ProgTester_temp.conf
	echo "HTML_STYLESHEET  = $(ISISROOT)/src/docsys/Object/build/doxygen.css"                     >> docbuild/ProgTester_temp.conf
	echo "IMAGE_PATH       = $(CURDIR)/"                             >> docbuild/ProgTester_temp.conf

	if [ "$(findstring LOUD,$(MODE))" = "LOUD" ]; \
	then \
	  echo "QUIET                  = NO"                           >> docbuild/ProgTester_temp.conf;   \
	echo "WARNINGS               = YES"                          >> docbuild/ProgTester_temp.conf;   \
	echo "WARN_IF_UNDOCUMENTED   = YES"                          >> docbuild/ProgTester_temp.conf;   \
	  echo "WARN_IF_DOC_ERROR      = YES"                          >> docbuild/ProgTester_temp.conf;   \
	  echo "WARN_NO_PARAMDOC       = YES"                          >> docbuild/ProgTester_temp.conf;   \
	else \
	  echo "QUIET                  = YES"                          >> docbuild/ProgTester_temp.conf;   \
	  echo "WARNINGS               = YES"                           >> docbuild/ProgTester_temp.conf;   \
	  echo "WARN_IF_UNDOCUMENTED   = YES"                           >> docbuild/ProgTester_temp.conf;   \
	  echo "WARN_IF_DOC_ERROR      = YES"                           >> docbuild/ProgTester_temp.conf;   \
	  echo "WARN_NO_PARAMDOC       = YES"                           >> docbuild/ProgTester_temp.conf;   \
	fi 

	doxygen docbuild/ProgTester_temp.conf
	-$(RM) -r docbuild
	echo "View your documentation by opening the file html/index.html in a browser"



clean:  localclean
	-$(RM) $(OBJS) $(PROTOSGEN) $(MOCGEN) unitTest.o unitTest print.prt $(ARCHIVELIB) $(SHAREDLIB) libisis$(ISISMAJOR).$(SHAREDLIBEXT).$(ISISMINOR).$(ISISMINORMINOR) libisis$(ISISMAJOR).$(SHAREDLIBEXT)
	-$(RM) -rf html

localclean:
	if [ "$(findstring cleanlocal,$(shell grep cleanlocal Makefile))" = "cleanlocal" ]; \
	then \
	   $(MAKE) cleanlocal; \
	fi

clean_protos:
	-$(RM) $(PROTOSGEN)

sanitize: clean
	-$(RM) tttt* junk.* TEMP*

test:
	$(ISISROOT)/scripts/unitTester $(HOST_OS) ; \
	temp=$$? ; \
	if test $$temp -eq 0 ; \
	then \
	  echo "Ok"; \
	elif test $$temp -eq 2 ; \
	then \
	  echo "unitTest.cpp not found"; \
	elif test $$temp -eq 1 ; \
	then \
	  echo "`basename $(CURDIR)`.truth not found"; \
	elif test $$temp -eq 3 ; \
	then \
	  echo "Could not make unitTest"; \
	elif test $$temp -eq 4 ; \
	then \
	  echo "UnitTest aborted"; \
	elif test $$temp -eq 5 ; \
	then \
	  echo "Failed"; \
	else \
	  echo "Unexpected system error"; \
	fi

unitTest: $(OBJS) unitTest.o
	$(CXX) $(ALLLIBDIRS) $(ISISLDFLAGS) -o $@ unitTest.o $(OBJS) $(ISISLINK) $(ALLLIBS)

plugin: $(OBJS)
	$(LDSHARED) $(ALLLIBDIRS) $(ISISSHAREDFLAGS) $(ISISSHAREDON) \
	    -o $(SHAREDLIB) $(OBJS) $(ISISSHAREDOFF)

truthdata: unitTest
	./unitTest >& `basename $(CURDIR)`.truth;
	
ostruthdata: unitTest
	if [ $(HOST_OS) = "" ]; then \
	  ./unitTest >& `basename $(CURDIR)`_$(HOST_ARCH)_$(HOST_PROC).truth; \
	else \
	  ./unitTest >& `basename $(CURDIR)`_$(HOST_ARCH)_$(HOST_PROC)_$(HOST_OS).truth; \
	fi
